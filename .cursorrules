###Architecture and Project Structure

Suggest a clear and scalable project structure for a Next.js workout app.
Recommend using the App Router for better performance and easier server-side rendering.
Provide templates for key directories: app, components, lib, types, styles, etc.
Suggest implementation of feature-based folder structure within app directory.

###TypeScript and Type Safety

Enforce strict TypeScript usage throughout the project.
Provide type definitions for common workout-related data structures (e.g., Workout, Exercise, User).
Suggest using Zod for runtime type checking and data validation, especially for form inputs and API responses.

###React and Next.js Best Practices

Favor React Server Components (RSC) where possible to minimize client-side JavaScript.
Suggest patterns for mixing Server and Client Components effectively.
Provide examples of using Next.js data fetching methods (getServerSideProps, getStaticProps, useQuery for client-side).
Recommend efficient state management solutions (e.g., Zustand for global state, React Query for server state).

###UI and Styling

Offer Tailwind CSS class suggestions for consistent styling of workout-related components.
Provide responsive design patterns for various screen sizes, emphasizing mobile-first approach.
Suggest accessible UI components from Radix UI or Shadcn UI for common elements (e.g., modals, dropdowns, forms).
Recommend icon usage from libraries like Heroicons or Lucide.

###Authentication and Authorization

Provide code snippets for implementing OAuth 2.0 flow using NextAuth.js.
Suggest patterns for protecting routes and API endpoints based on user authentication status.
Offer guidance on securely storing and managing user tokens on both client and server side.

### Database and API Integration

Suggest Prisma schema designs for storing user profiles, workouts, and exercise data in PostgreSQL.
Provide examples of API routes in Next.js for CRUD operations on workout data.
Offer patterns for efficient data fetching and caching using React Query.

###Performance Optimization

Suggest image optimization techniques using Next.js Image component.
Recommend lazy loading patterns for non-critical components and data.
Provide examples of implementing dynamic imports for code splitting.

### Error Handling and Logging

Suggest implementation of custom error boundaries for graceful error handling.
Provide patterns for consistent error logging across the application.
Offer examples of user-friendly error messages for common scenarios.

### Testing

Suggest unit testing patterns using Jest and React Testing Library.
Provide examples of integration tests for critical user flows (e.g., creating a workout, logging an exercise).
Recommend end-to-end testing setup using Cypress or Playwright.

### Deployment and DevOps

Provide configuration snippets for deploying to Vercel.
Suggest CI/CD pipeline setup using GitHub Actions.
Offer guidance on environment variable management for different deployment stages.

### Code Quality and Maintenance

Enforce consistent code formatting using Prettier.
Suggest ESLint rules for maintaining code quality.
Recommend using Husky for pre-commit hooks to ensure code quality before commits.

### Workout App Specific Features

Provide patterns for implementing workout tracking functionality.
Suggest data visualization techniques for displaying workout history and progress.
Offer examples of implementing user goal setting and achievement tracking.

### Methodology for Implementation

For each feature, start with a brief planning phase using <PLANNING> tags.
Break down complex features into smaller, manageable tasks.
Implement features iteratively, starting with core functionality and adding refinements.
Regularly review and refactor code to maintain clarity and performance.
Consider edge cases and error scenarios for each feature implementation.